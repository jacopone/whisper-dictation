[project]
name = "whisper-dictation"
version = "0.1.0"
description = "Local speech-to-text dictation with push-to-talk for NixOS"
readme = "README.md"
requires-python = ">=3.12"
license = {text = "MIT"}
authors = [
    {name = "Whisper Dictation Contributors"}
]

dependencies = [
    "evdev>=1.9.0",
    "pygobject>=3.50.0",
    "pyaudio>=0.2.14",
    "pyyaml>=6.0.2",
]

[project.optional-dependencies]
dev = [
    "pytest>=8.0.0",
    "pytest-cov>=5.0.0",
    "pytest-asyncio>=0.24.0",
    "black>=25.0.0",
    "ruff>=0.12.0",
]

[project.scripts]
whisper-dictation = "whisper_dictation.daemon:main"

[tool.pytest.ini_options]
testpaths = ["tests"]
python_files = ["test_*.py"]
python_classes = ["Test*"]
python_functions = ["test_*"]
addopts = "--cov=src/whisper_dictation --cov-report=term-missing --cov-report=html"

[tool.coverage.run]
source = ["src/whisper_dictation"]
omit = ["tests/*", ".devenv/*"]

[tool.coverage.report]
exclude_lines = [
    "pragma: no cover",
    "def __repr__",
    "raise AssertionError",
    "raise NotImplementedError",
    "if __name__ == .__main__.:",
    "if TYPE_CHECKING:",
]

[tool.black]
line-length = 100
target-version = ["py312"]
include = '\.pyi?$'
exclude = '''
/(
    \.devenv
  | \.git
  | \.pytest_cache
  | __pycache__
  | result
)/
'''

[tool.ruff]
line-length = 100
target-version = "py312"
exclude = [
    ".devenv",
    ".git",
    ".pytest_cache",
    "__pycache__",
    "result",
]

[tool.ruff.lint]
select = [
    "E",   # pycodestyle errors
    "W",   # pycodestyle warnings
    "F",   # pyflakes
    "I",   # isort
    "B",   # flake8-bugbear
    "C4",  # flake8-comprehensions
    "UP",  # pyupgrade
]
ignore = [
    "E501",  # line too long (handled by black)
]

[build-system]
requires = ["setuptools>=68.0", "wheel"]
build-backend = "setuptools.build_meta"
